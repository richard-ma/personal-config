#######################################
## Comments
#######################################
# File Comment
snippet filec
	/*****************************************
	 * Filename: ${1:`Filename()`}
	 * Author:   ${2:`g:snips_author`}
	 * E-Mail:   ${3:`g:snips_email`}
	 * Date:     ${4:`system("date +%Y-%m-%d")`}
	 * Description: ${5}
	 ****************************************/
	 
	${6}
snippet funcc
	/*****************************************
	 * Function name: $1
	 * Params: $2
	 * Return: $3
	 * Descripction: ${4}
	 ****************************************/
	${3:void} ${1:function_name} (${2:int a}) {
		${5:/* code */}
	}
#######################################
# main()
snippet main
	/*****************************************
	 * Main Function
	 ****************************************/
	int main(int argc, const char *argv[]) {

		${1}

		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef ${1:SYMBOL}
	#define ${1:SYMBOL} ${2:value}
	#endif${3} /* __endif ${1:SYMBOL}__ */
snippet def
	#define  ${1:SYMBOL} ${2:value}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif /* __endif ${1:FOO}__ */
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper('__'.Filename('', 'UNTITLED').'_H')`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet else
	else {
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
		${4:/* code */}
	}
snippet forre
	for (${1:i} = ${2:0}; ${3:$1 > 10}; $1${4:--}) {
		${5:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3}) {
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	};${3}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}"${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned
