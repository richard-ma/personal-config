# main()
snippet main
	int main(int argc, const char *argv[]) {

		${1}

		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef ${1:SYMBOL}
	#define ${1:SYMBOL} ${2:value}
	#endif${3} /* __endif ${1:SYMBOL}__ */
snippet def
	#define  ${1:SYMBOL} ${2:value}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif /* __endif ${1:FOO}__ */
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper('__'.Filename('', 'UNTITLED').'_H')`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet else
	else {
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
		${4:/* code */}
	}
snippet forre
	for (${1:i} = ${2:0}; ${3:$1 > 10}; $1${4:--}) {
		${5:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3}) {
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	};${3}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned
# ###################################################################
# Linux c standard functions
# ###################################################################
snippet isalnum
	isalnum(${1:int c})${2:;}
snippet isalpha
	isalpha(${1:int c})${2:;}
snippet isascii
	isascii(${1:int c})${2:;}
snippet iscntrl
	iscntrl(${1:int c})${2:;}
snippet isdigit
	isdigit(${1:int c})${2:;}
snippet isgraph
	isgraph(${1:int c})${2:;}
snippet islower
	islower(${1:int c})${2:;}
snippet isprint
	isprint(${1:int c})${2:;}
snippet isspace
	isspace(${1:int c})${2:;}
snippet ispunct
	ispunct(${1:int c})${2:;}
snippet isupper
	isupper(${1:int c})${2:;}
snippet isxdigit
	isxdigit(${1:int c})${2:;}
snippet atof
	atof(${1:const char *nptr})${2:;}
snippet atoi
	atoi(${1:const char *nptr})${2:;}
snippet atol
	atol(${1:const char *nptr})${2:;}
snippet gcvt
	gcvt(${1:double number}, ${2:size_t ndigit}, ${3:char *buf})${4:;}
snippet strtod
	strtod(${1:const char *nptr}, ${2:char **endptr})${3:;}
snippet strtol
	strtol(${1:const char *nptr}, ${2:char **endptr}, ${3:int base})${4:;}
snippet strtoul
	strtoul(${1:const char *nptr}, ${2:char **endptr}, ${3:int base})${4:;}
snippet toascii
	toascii(${1:int c})${2:;}
snippet tolower
	tolower(${1:int c})${2:;}
snippet toupper
	toupper(${1:int c})${2:;}
snippet calloc
	calloc(${1:size_t nmemb}, ${2:size_t size})${3:;}
snippet free
	free(${1:void *ptr})${2:;}
snippet getpagesize
	getpagesize()${1:;}
snippet malloc
	malloc(${1:size_t size})${2:;}
snippet mmap
	mmap(${1:void *start}, ${2:size_t length}, ${3:int prot}, ${4:int flags}, ${5:int fd}, ${6:off_t offsize})${7:;}
snippet munmap
	munmap(${1:void *start}, ${2:size_t length})${3:;}
